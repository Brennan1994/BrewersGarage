# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#lhjlkhj
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.  
# Replace the variables relative to your project in the "env" section below.
# 
# 2. Signing
# Generate a signing certificate in the Windows Application 
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
# 
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for 
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ master ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Solution_Name: BrewersGarage.sln                              # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: BrewersGarage\UnitTests                    # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: BrewersGarage                          # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: BrewersGarage\BrewersGarage.csproj          # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@2008f912f56e61277eefaac6d1888b750582aa16

    # Execute Tests
    - name: Execute unit tests
      run: dotnet test

    # Restore Packages
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }} 
      
    # Create the app package by building and packaging the project
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /t:Build 
      env:
        Configuration: ${{ matrix.configuration }}

    # Zips up the release binaries and saves them as an artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: BrewersGarage
        path: D:\a\BrewersGarage\BrewersGarage\BrewersGarage\bin\Release

    # Zips the Binaries and saves them 
    - name: zip
      run: Compress-Archive -Path D:\a\BrewersGarage\BrewersGarage\BrewersGarage\bin\Release\*.* -DestinationPath D:\a\BrewersGarage\BrewersGarage\BrewersGarage\bin\BrewersGarageAlpha.zip

    # Creates a release on GitHub 
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: Latest
        release_name: BrewersGarage Alpha 
        body: Development Release
        draft: false
        prerelease: true

      # Uploads those Binaries to the Release   
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: D:\a\BrewersGarage\BrewersGarage\BrewersGarage\bin\BrewersGarageAlpha.zip
          asset_name: BrewersGarageAlpha.zip
          asset_content_type: application/zip
